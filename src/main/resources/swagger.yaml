openapi: 3.0.0
servers:
  - description: SurfsUp Swagger
    url: /v1
info:
  description: |
    End-points for SurfsUp.
  version: "v1"
  title: Swagger SurfsUp
  contact:
    email: amanmanocha@yahoo.com
tags:
  - name: beaches
    description: Status of Beaches
  - name: users
    description: Everything about Users
  - name: alerts
    description: Everything about Alerts

paths:
  /users/:
    post:
      tags:
        - users
      summary: Registers user
      operationId: registerUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenWithUser'
        '409':
          description: User already registered
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          required: true
  /users/social/facebook:
    post:
      tags:
        - users
        - facebook
      summary: Registers facebook user
      operationId: registerFacebookUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenWithUser'
        '409':
          description: User already registered
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacebookAccessRequest'
          required: true
  /users/social/apple:
    post:
      tags:
        - users
        - facebook
      summary: Registers apple user
      operationId: registerAppleUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenWithUser'
        '409':
          description: User already registered
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacebookAccessRequest'
          required: true
  /users/login:
    post:
      tags:
        - users
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenWithUser'
        '404':
          description: User not found
        '401':
          description: User authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          required: true
  /users/social/facebook/login:
    post:
      tags:
        - users
        - facebook
      summary: Logs in facebook user
      operationId: loginFacebookUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenWithUser'
        '401':
          description: User authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacebookAccessRequest'
          required: true
  /users/social/apple/login:
    post:
      tags:
        - users
        - facebook
      summary: Logs in apple user
      operationId: loginAppleUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenWithUser'
        '401':
          description: User authentication failed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppleAccessRequest'
          required: true
  /users/refresh:
    post:
      tags:
        - users
      summary: Generates new access tokens
      operationId: generateNewAccessTokens
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenWithUser'
      '401':
        description: Refresh token not found or Refresh token expired
      '404':
        description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenRequest'
          required: true
  /users/changePassword:
    post:
      tags:
        - users
      summary: Changes user's password
      operationId: changePassword
      responses:
        '200':
          description: successful operation
      '400':
        description: Authentication failed for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          required: true
  /users/resetPassword:
    post:
      tags:
        - users
      summary: Resets user's password
      operationId: changePassword
      responses:
        '200':
          description: successful operation
      '400':
        description: Authentication failed for user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          required: true
  /users/profile:
    put:
      tags:
        - users
      summary: Updates users profile
      operationId: updateProfile
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
          required: true
      security:
        - bearerAuth: [ ]
    get:
      tags:
        - users
      summary: Get users profile
      operationId: getProfile
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
  /users/deviceToken:
    put:
      tags:
        - users
      summary: Updates users device token
      operationId: updateDeviceToken
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDeviceTokenRequest'
          required: true
      security:
        - bearerAuth: [ ]
  /users/sendOTP:
    post:
      tags:
        - users
      summary: Sends OTP to user
      operationId: updateDeviceToken
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
  /users/verifyEmail:
    post:
      tags:
        - users
      summary: Verifies email
      operationId: verifyEmail
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Invalid or expired OTP
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTP'
          required: true
      security:
        - bearerAuth: [ ]
  /users/logout:
    post:
      tags:
        - users
      summary: Logs out user
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
  /users/purchase/android:
    get:
      tags:
        - users
      summary: Gets android purchase
      operationId: getAndroidPurchase
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
    post:
      tags:
        - users
      summary: Registers android purchase
      operationId: verifyAndroidPurchase
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseReceiptValidationRequest'
          description: Created user object
          required: true
      security:
        - bearerAuth: [ ]
  /users/purchase/apple:
    get:
      tags:
        - users
      summary: Gets apple purchase
      operationId: getApplePurchase
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
    post:
      tags:
        - users
      summary: Registers apple purchase
      operationId: verifyApplePurchase
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppleReceiptValidationRequest'
          description: Created user object
          required: true
      security:
        - bearerAuth: [ ]
  /users/alerts:
    get:
      tags:
        - alerts
      summary: Gets alerts for user
      operationId: getAlerts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '400':
          description: Invalid status value
      security:
        - bearerAuth: [ ]
  /users/alerts/{id}:
    delete:
      tags:
        - alerts
      summary: Delete alert with specified id
      operationId: deleteAlert
      responses:
        '204':
          description: successful operation
        '404':
          description: Alert not found
      security:
        - bearerAuth: [ ]
    put:
      tags:
        - alerts
      summary: Updates alert with specified id
      operationId: updateAlert
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '403':
          description: Operation not allowed
        '404':
          description: Alert not found
      security:
        - bearerAuth: [ ]
    post:
      tags:
        - alerts
      summary: Creates alert with specified id
      operationId: createAlert
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '403':
          description: Operation not allowed
      security:
        - bearerAuth: [ ]
  /beaches/{id}/currentStatus:
    get:
      tags:
        - beaches
      summary: Returns the status of beach with specified id
      operationId: getBeachStatus
      parameters:
        - name: "id"
          in: "path"
          description: "ID of beach that needs to be fetched"
          required: true
          type: "integer"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beach'
components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
        deviceType:
          type: string
        deviceToken:
          type: string
    FacebookAccessRequest:
      type: object
      properties:
        accessToken:
          type: string
        deviceType:
          type: string
        deviceToken:
          type: string
    AppleAccessRequest:
      type: object
      properties:
        authorizationCode:
          type: string
        nonce:
          type: string
        deviceType:
          type: string
        deviceToken:
          type: string
        name:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        deviceType:
          type: string
        deviceToken:
          type: string
    ChangePasswordRequest:
      type: object
      properties:
        email:
          type: string
        oldPassword:
          type: string
        newPassword:
          type: string
        deviceType:
          type: string
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
        deviceType:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        userType:
          type: string
        snoozeTill:
          type: integer
        disableAllAlerts:
          type: boolean
        notificationsPerHour:
          type: integer
    UpdateUserDeviceTokenRequest:
      type: object
      properties:
        deviceToken:
          type: string
    OTP:
      type: object
      properties:
        otp:
          type: string
    PurchaseReceiptValidationRequest:
      type: object
      properties:
        productId:
          type: string
        token:
          type: string
    AppleReceiptValidationRequest:
      type: object
      properties:
        token:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        deviceToken:
          type: string
        deviceType:
          type: string
        startTrialAt:
          type: integer
        endTrialAt:
          type: integer
        userType:
          type: string
        snoozeTill:
          type: integer
        disableAllAlerts:
          type: boolean
        notificationsPerHour:
          type: integer
        lastPaymentAt:
          type: integer
        nextPaymentAt:
          type: integer
    AccessTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
    TokenWithUser:
      type: object
      properties:
        accessToken:
          type: string
        refeshToken:
          type: string
        expiredAt:
          type: integer
        user:
          $ref: '#/components/schemas/User'
    TimeRange:
      type: object
      properties:
        from:
          type: integer
        to:
          type: integer
    AlertRequest:
      type: object
      properties:
        owner:
          type: string
        beachId:
          type: integer
        days:
          type: array
          items:
            type: integer
        swellDirections:
          type: array
          items:
            type: string
        timeRanges:
          type: array
          items:
            $ref: '#/components/schemas/TimeRange'
        waveHeightFrom:
          type: number
        waveHeightTo:
          type: number
        windDirections:
          type: array
          items:
            type: string
        tideHeightStatuses:
          type: array
          items:
            type: string
        enabled:
          type: string
        timeZone:
          type: string
    Alert:
      type: object
      properties:
        id:
          type: string
        owner:
          type: string
        beachId:
          type: integer
        days:
          type: array
          items:
            type: integer
        swellDirections:
          type: array
          items:
            type: string
        timeRanges:
          type: array
          items:
            $ref: '#/components/schemas/TimeRange'
        waveHeightFrom:
          type: number
        waveHeightTo:
          type: number
        windDirections:
          type: array
          items:
            type: string
        tideHeightStatuses:
          type: array
          items:
            type: string
        enabled:
          type: string
        timeZone:
          type: string
    Alerts:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Alert'
      description: List of alerts
    BeachId:
      type: object
      properties:
        id:
          type: integer
    TideHeight:
      type: object
      properties:
        height:
          type: number
        status:
          type: string
        nextLow:
          type: integer
        nextHigh:
          type: integer
    SwellOutput:
      type: object
      properties:
        height:
          type: number
        direction:
          type: number
        directionText:
          type: string
    Tide:
      type: object
      properties:
        height:
          $ref: '#/components/schemas/TideHeight'
        swell:
          $ref: '#/components/schemas/SwellOutput'
    Wind:
      type: object
      properties:
        direction:
          type: number
        speed:
          type: number
        directionText:
          type: string
        trend:
          type: string
    Beach:
      type: object
      properties:
        beachId:
          $ref: '#/components/schemas/BeachId'
        wind:
          $ref: '#/components/schemas/Wind'
        tide:
          $ref: '#/components/schemas/Tide'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT